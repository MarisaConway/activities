{"version":3,"sources":["components/DashBoard.js","components/ActivityForm.js","components/EditActivity.js","components/ReviewActivity.js","App.js","serviceWorker.js","index.js"],"names":["DashBoard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","axios","get","then","res","setState","activities","data","rateThings","catch","err","console","log","toConsumableArray","state","i","setTimeout","reviews","length","sum","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","rating","return","avgRating","arr","key","j","temp","bubbleSort","react_default","a","createElement","map","activity","_id","type","duration","units","react_router_dom","to","Component","ActivityForm","changeType","e","objectSpread","target","changeDuration","changeUnits","create","preventDefault","post","errors","history","push","onSubmit","onChange","className","message","EditActivity","concat","match","params","update","put","delete","id","onClick","ReviewActivity","review","changeName","name","changeRating","changeDescription","description","index","App","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAgGeA,cA9EX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMVQ,kBAAoB,WAChBC,IAAMC,IAAI,eACLC,KAAK,SAAAC,GACFX,EAAKY,SAAS,CAACC,WAAYF,EAAIG,KAAKD,YAAa,WAC7Cb,EAAKe,iBAEVC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MAdLjB,EAkBnBe,WAAa,WACT,IAAIF,EAAUZ,OAAAmB,EAAA,EAAAnB,CAAOD,EAAKqB,MAAMR,YAIhC,IAAI,IAAIS,KAHRC,WAAW,WACPL,QAAQC,IAAI,QAASN,IACtB,KACUA,EACT,GAAGA,EAAWS,GAAGE,QAAQC,OAAS,EAAE,CAChC,IAAIC,EAAM,EADsBC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEhC,QAAAC,EAAAC,EAAkBnB,EAAWS,GAAGE,QAAhCS,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAyC,CACrCD,GADqCK,EAAAM,MACvBC,QAHc,MAAArB,GAAAW,GAAA,EAAAC,EAAAZ,EAAA,YAAAU,GAAA,MAAAK,EAAAO,QAAAP,EAAAO,SAAA,WAAAX,EAAA,MAAAC,GAKhChB,EAAWS,GAAGkB,UAAYd,EAAMb,EAAWS,GAAGE,QAAQC,YAEtDZ,EAAWS,GAAGkB,UAAY,aAGlC3B,EAhDR,SAAoB4B,EAAKC,GACrB,IAAI,IAAIpB,EAAE,EAAGA,EAAEmB,EAAIhB,OAAO,EAAGH,IACzB,IAAI,IAAIqB,EAAE,EAAGA,EAAEF,EAAIhB,OAAO,EAAEH,EAAGqB,IAC3B,GAAGF,EAAIE,GAAGD,GAAOD,EAAIE,EAAE,GAAGD,GAAK,CAC3B,IAAIE,EAAOH,EAAIE,GACfF,EAAIE,GAAKF,EAAIE,EAAE,GACfF,EAAIE,EAAE,GAAKC,EAIvB,OAAOH,EAsCUI,CAAWhC,EAAY,aACpCb,EAAKY,SAAS,CAACC,WAAYA,KAjC3Bb,EAAKqB,MAAQ,CACTR,WAAY,IAHDb,wEAuCf,OACI8C,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBAGRF,EAAAC,EAAAC,cAAA,aAEQ7C,KAAKkB,MAAMR,WAAWoC,IAAK,SAAAC,GAAQ,OAC/BJ,EAAAC,EAAAC,cAAA,MAAIN,IAAKQ,EAASC,KACdL,EAAAC,EAAAC,cAAA,UAAKE,EAASE,MACdN,EAAAC,EAAAC,cAAA,UAAKE,EAASV,WACdM,EAAAC,EAAAC,cAAA,UAAKE,EAASG,SAAd,IAAyBH,EAASI,OAClCR,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACIC,GAAI,aAAeN,EAASC,IAAM,SAClCL,EAAAC,EAAAC,cAAA,uBAEJF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACIC,GAAI,aAAeN,EAASC,IAAM,WAClCL,EAAAC,EAAAC,cAAA,uCAlEpBS,oBCmETC,cAhFX,SAAAA,EAAY3D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuD,IACf1D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyD,GAAApD,KAAAH,KAAMJ,KAWV4D,WAAa,SAACC,GACV5D,EAAKY,SAAS,CAACsC,SAASjD,OAAA4D,EAAA,EAAA5D,CAAA,GAAKD,EAAKqB,MAAM6B,SAAjB,CAA2BE,KAAMQ,EAAEE,OAAOzB,WAblDrC,EAgBnB+D,eAAiB,SAACH,GACd5D,EAAKY,SAAS,CAACsC,SAASjD,OAAA4D,EAAA,EAAA5D,CAAA,GAAKD,EAAKqB,MAAM6B,SAAjB,CAA2BG,SAAUO,EAAEE,OAAOzB,WAjBtDrC,EAoBnBgE,YAAc,SAACJ,GACX5D,EAAKY,SAAS,CAACsC,SAASjD,OAAA4D,EAAA,EAAA5D,CAAA,GAAKD,EAAKqB,MAAM6B,SAAjB,CAA2BI,MAAOM,EAAEE,OAAOzB,WArBnDrC,EAwBnBiE,OAAS,SAACL,GACNA,EAAEM,iBACF1D,IAAM2D,KAAK,cAAenE,EAAKqB,MAAM6B,UAChCxC,KAAK,SAAAC,GACCA,EAAIG,KAAKsD,QACRpE,EAAKY,SAAS,CAACwD,OAAQzD,EAAIG,KAAKsD,OAAOA,SACvClD,QAAQC,IAAInB,EAAKqB,QAEjBrB,EAAKD,MAAMsE,QAAQC,KAAK,OAE7BtD,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MAjCpBjB,EAAKqB,MAAQ,CACT6B,SAAU,CACNE,KAAM,GACNC,SAAU,GACVC,MAAO,SAEXc,OAAQ,IARGpE,wEAwCf,OACI8C,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,QAAMuB,SAAUpE,KAAK8D,QACjBnB,EAAAC,EAAAC,cAAA,qBAEIF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOoB,SAAUrE,KAAKwD,aAE7BxD,KAAKkB,MAAM+C,OAAOhB,KACnBN,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,SAAhB,OAA+BtE,KAAKkB,MAAM+C,OAAOhB,KAAKsB,SACtD5B,EAAAC,EAAAC,cAAA,cAGRF,EAAAC,EAAAC,cAAA,yBAEIF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASoB,SAAUrE,KAAK4D,iBAE/B5D,KAAKkB,MAAM+C,OAAOf,SACnBP,EAAAC,EAAAC,cAAA,mBAAa7C,KAAKkB,MAAM+C,OAAOf,SAASqB,SACxC5B,EAAAC,EAAAC,cAAA,cAGRF,EAAAC,EAAAC,cAAA,sBAEIF,EAAAC,EAAAC,cAAA,UAAQwB,SAAUrE,KAAK6D,aACnBlB,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,2BAGRF,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,4BA1EOK,aC+GZkB,cA7GX,SAAAA,EAAY5E,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwE,IACd3E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0E,GAAArE,KAAAH,KAAMJ,KAWVQ,kBAAoB,WAChBC,IAAMC,IAAN,eAAAmE,OAAyB5E,EAAKD,MAAM8E,MAAMC,OAAO3B,MAC5CzC,KAAK,SAAAC,GACFX,EAAKY,SAAS,CAACsC,SAAUvC,EAAIG,KAAKoC,aAEnClC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MAlBNjB,EAsBlB2D,WAAa,SAACC,GACV5D,EAAKY,SAAS,CAACsC,SAASjD,OAAA4D,EAAA,EAAA5D,CAAA,GAAKD,EAAKqB,MAAM6B,SAAjB,CAA2BE,KAAMQ,EAAEE,OAAOzB,WAvBnDrC,EA0BlB+D,eAAiB,SAACH,GACd5D,EAAKY,SAAS,CAACsC,SAASjD,OAAA4D,EAAA,EAAA5D,CAAA,GAAKD,EAAKqB,MAAM6B,SAAjB,CAA2BG,SAAUO,EAAEE,OAAOzB,WA3BvDrC,EA8BlBgE,YAAc,SAACJ,GACX5D,EAAKY,SAAS,CAACsC,SAASjD,OAAA4D,EAAA,EAAA5D,CAAA,GAAKD,EAAKqB,MAAM6B,SAAjB,CAA2BI,MAAOM,EAAEE,OAAOzB,WA/BpDrC,EAkClB+E,OAAS,SAACnB,GACNA,EAAEM,iBACFhD,QAAQC,IAAInB,EAAKqB,OACjBb,IAAMwE,IAAN,eAAAJ,OAAyB5E,EAAKD,MAAM8E,MAAMC,OAAO3B,KACjDnD,EAAKqB,MAAM6B,UACNxC,KAAK,SAAAC,GACCA,EAAIG,KAAKsD,OACRpE,EAAKY,SAAS,CAACwD,OAAQzD,EAAIG,KAAKsD,OAAOA,SAEvCpE,EAAKD,MAAMsE,QAAQC,KAAK,OAE7BtD,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MA9CNjB,EAkDlBiF,OAAS,SAACrB,GACNpD,IAAMyE,OAAN,eAAAL,OAA4B5E,EAAKD,MAAM8E,MAAMC,OAAO3B,MAC/CzC,KAAK,SAAAC,GACFX,EAAKD,MAAMsE,QAAQC,KAAK,OACzBtD,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MArDpBjB,EAAKqB,MAAQ,CACT6B,SAAU,CACNE,KAAM,GACNC,SAAU,GACVC,MAAO,SAEXc,OAAQ,IAREpE,wEA4Dd,OACI8C,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,QAAMuB,SAAUpE,KAAK4E,QACjBjC,EAAAC,EAAAC,cAAA,qBAEIF,EAAAC,EAAAC,cAAA,SACII,KAAK,OACLoB,SAAUrE,KAAKwD,WACftB,MAAOlC,KAAKkB,MAAM6B,SAASE,OAG1BjD,KAAKkB,MAAM+C,OAAOhB,KACnBN,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,SAAhB,OAA+BtE,KAAKkB,MAAM+C,OAAOhB,KAAKsB,SACtD5B,EAAAC,EAAAC,cAAA,cAGRF,EAAAC,EAAAC,cAAA,yBAEIF,EAAAC,EAAAC,cAAA,SACII,KAAK,SACLoB,SAAUrE,KAAK4D,eACf1B,MAAOlC,KAAKkB,MAAM6B,SAASG,WAG1BlD,KAAKkB,MAAM+C,OAAOf,SACnBP,EAAAC,EAAAC,cAAA,mBAAa7C,KAAKkB,MAAM+C,OAAOf,SAASqB,SACxC5B,EAAAC,EAAAC,cAAA,cAGRF,EAAAC,EAAAC,cAAA,sBAEIF,EAAAC,EAAAC,cAAA,UAAQkC,GAAG,SAASV,SAAUrE,KAAK6D,YAAa3B,MAAOlC,KAAKkB,MAAM6B,SAASI,OACvER,EAAAC,EAAAC,cAAA,UAAQX,MAAM,SAAd,SACAS,EAAAC,EAAAC,cAAA,UAAQX,MAAM,UAAd,UACAS,EAAAC,EAAAC,cAAA,UAAQX,MAAM,QAAd,QACAS,EAAAC,EAAAC,cAAA,UAAQX,MAAM,SAAd,SACAS,EAAAC,EAAAC,cAAA,UAAQX,MAAM,WAAd,WACAS,EAAAC,EAAAC,cAAA,UAAQX,MAAM,WAAd,aAGRS,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,oBAEJN,EAAAC,EAAAC,cAAA,UAAQmC,QAAShF,KAAK8E,QAAtB,2BAxGWxB,aC0GZ2B,cAvGX,SAAAA,EAAYrF,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiF,IACdpF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmF,GAAA9E,KAAAH,KAAMJ,KAkBVQ,kBAAoB,WAChBC,IAAMC,IAAN,eAAAmE,OAAyB5E,EAAKD,MAAM8E,MAAMC,OAAO3B,MAC5CzC,KAAK,SAAAC,GACFX,EAAKY,SAAS,CAACsC,SAAUvC,EAAIG,KAAKoC,aAEnClC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MAzBNjB,EA4BlBqF,OAAS,SAACzB,GACNA,EAAEM,iBACF1D,IAAM2D,KAAN,eAAAS,OAA0B5E,EAAKD,MAAM8E,MAAMC,OAAO3B,IAAlD,WAAgEnD,EAAKqB,MAAMgE,QACtE3E,KAAK,SAAAC,GACFX,EAAKO,sBACNS,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MAlCNjB,EAqClBsF,WAAa,SAAC1B,GACV5D,EAAKY,SAAS,CAACyE,OAAOpF,OAAA4D,EAAA,EAAA5D,CAAA,GAAKD,EAAKqB,MAAMgE,OAAjB,CAAyBE,KAAM3B,EAAEE,OAAOzB,WAtC/CrC,EAwClBwF,aAAe,SAAC5B,GACZ5D,EAAKY,SAAS,CAACyE,OAAOpF,OAAA4D,EAAA,EAAA5D,CAAA,GAAKD,EAAKqB,MAAMgE,OAAjB,CAAyB/C,OAAQsB,EAAEE,OAAOzB,WAzCjDrC,EA2ClByF,kBAAoB,SAAC7B,GACjB5D,EAAKY,SAAS,CAACyE,OAAOpF,OAAA4D,EAAA,EAAA5D,CAAA,GAAKD,EAAKqB,MAAMgE,OAAjB,CAAyBK,YAAa9B,EAAEE,OAAOzB,WA1CpErC,EAAKqB,MAAQ,CACT6B,SAAU,CACNE,KAAM,GACNC,SAAU,GACVC,MAAO,QACP9B,QAAS,IAEb6D,OAAS,CACLE,KAAM,GACNjD,OAAQ,EACRoD,YAAa,IAGjBtB,OAAQ,IAfEpE,wEAgDd,OACI8C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBAAe7C,KAAKkB,MAAM6B,SAASE,KAAnC,KACAN,EAAAC,EAAAC,cAAA,wBAAgB7C,KAAKkB,MAAM6B,SAASG,SAApC,IAA+ClD,KAAKkB,MAAM6B,SAASI,OACnER,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,WAGI7C,KAAKkB,MAAM6B,SAAS1B,QAAQyB,IAAK,SAACoC,EAAQM,GAAT,OAC7B7C,EAAAC,EAAAC,cAAA,OAAKN,IAAKiD,GACN7C,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,cAASqC,EAAOE,KAAhB,WADJ,QAEKF,EAAOK,aAGZ5C,EAAAC,EAAAC,cAAA,SAAIqC,EAAO/C,QACXQ,EAAAC,EAAAC,cAAA,cAKZF,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,QAAMuB,SAAUpE,KAAKkF,QACjBvC,EAAAC,EAAAC,cAAA,qBAEIF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOoB,SAAUrE,KAAKmF,cAOtCxC,EAAAC,EAAAC,cAAA,uBAEIF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASoB,SAAUrE,KAAKqF,gBAOxC1C,EAAAC,EAAAC,cAAA,4BAEIF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOoB,SAAUrE,KAAKsF,qBAEtC3C,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,6BA/FKK,aC0BdmC,mLAnBX,OACE9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,KAAT,SACJV,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,iBAAT,kBAENV,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlG,IACjCgD,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOE,KAAK,gBAAgBC,UAAWtC,IACvCZ,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOE,KAAK,sBAAsBC,UAAWrB,IAC7C7B,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOE,KAAK,wBAAwBC,UAAWZ,aAbvC3B,aCCEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2DCZNwB,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlG,KAAK,SAAAmG,GACjCA,EAAaC","file":"static/js/main.49fdf518.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction bubbleSort(arr, key) {\r\n    for(let i=0; i<arr.length-1; i++){\r\n        for(let j=0; j<arr.length-1-i; j++){\r\n            if(arr[j][key] < arr[j+1][key]){\r\n                let temp = arr[j];\r\n                arr[j] = arr[j+1];\r\n                arr[j+1] = temp;\r\n            }\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nclass DashBoard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activities: []\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        axios.get(\"/activities\")\r\n            .then(res => {\r\n                this.setState({activities: res.data.activities}, () => {\r\n                    this.rateThings();\r\n                });\r\n            }).catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    rateThings = () => {\r\n        let activities = [...this.state.activities];\r\n        setTimeout(() => {\r\n            console.log(\"hello\", activities);\r\n        }, 1000 )\r\n        for(let i in activities) {\r\n            if(activities[i].reviews.length > 0){\r\n                let sum = 0;\r\n                for(let review of activities[i].reviews) {\r\n                    sum += review.rating;\r\n                }\r\n                activities[i].avgRating = sum / activities[i].reviews.length;\r\n            } else {\r\n                activities[i].avgRating = \"No reviews\";\r\n            }\r\n        }\r\n        activities = bubbleSort(activities, \"avgRating\");\r\n        this.setState({activities: activities});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <fieldset>\r\n                <legend>Activities</legend>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Type</th>\r\n                            <th>Rating</th>\r\n                            <th>Duration</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.activities.map( activity => \r\n                                <tr key={activity._id}>\r\n                                    <td>{activity.type}</td>\r\n                                    <td>{activity.avgRating}</td>\r\n                                    <td>{activity.duration} {activity.units}</td>\r\n                                    <td>\r\n                                        <Link \r\n                                            to={\"/activity/\" + activity._id + \"/edit\"}>\r\n                                            <button>Edit</button>\r\n                                        </Link>\r\n                                        <Link \r\n                                            to={\"/activity/\" + activity._id + \"/review\"}>\r\n                                            <button>Review</button>\r\n                                        </Link>\r\n                                    </td>\r\n                                </tr>    \r\n                            )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </fieldset>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashBoard;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass ActivityForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activity: {\r\n                type: \"\",\r\n                duration: \"\",\r\n                units: \"Years\"\r\n            },\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    changeType = (e) => {\r\n        this.setState({activity: {...this.state.activity, type: e.target.value}});\r\n    }\r\n\r\n    changeDuration = (e) => {\r\n        this.setState({activity: {...this.state.activity, duration: e.target.value}});\r\n    }\r\n\r\n    changeUnits = (e) => {\r\n        this.setState({activity: {...this.state.activity, units: e.target.value}});\r\n    }\r\n\r\n    create = (e) => {\r\n        e.preventDefault();\r\n        axios.post(\"/activities\", this.state.activity)\r\n            .then(res => {\r\n                if(res.data.errors){\r\n                    this.setState({errors: res.data.errors.errors});\r\n                    console.log(this.state);\r\n                } else {\r\n                    this.props.history.push(\"/\");\r\n                }\r\n            }).catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <fieldset>\r\n                <legend>Create Activity</legend>\r\n                <form onSubmit={this.create}>\r\n                    <p>\r\n                        Type:&nbsp;\r\n                        <input type=\"text\" onChange={this.changeType} />\r\n                        {\r\n                            (this.state.errors.type) ? \r\n                            <span className=\"error\">&nbsp;{this.state.errors.type.message}</span> :\r\n                            <span></span>\r\n                        }\r\n                    </p>\r\n                    <p>\r\n                        Duration:&nbsp;\r\n                        <input type=\"number\" onChange={this.changeDuration} />\r\n                        {\r\n                            (this.state.errors.duration) ? \r\n                            <span>&nbsp;{this.state.errors.duration.message}</span> :\r\n                            <span></span>\r\n                        }\r\n                    </p>\r\n                    <p>\r\n                        Units:&nbsp;\r\n                        <select onChange={this.changeUnits}>\r\n                            <option>Years</option>\r\n                            <option>Months</option>\r\n                            <option>Days</option>\r\n                            <option>Hours</option>\r\n                            <option>Minutes</option>\r\n                            <option>Seconds</option>\r\n                        </select>\r\n                    </p>\r\n                    <button type=\"submit\">Create Activity</button>\r\n                </form>\r\n            </fieldset>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActivityForm;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ActivityForm from './ActivityForm';\r\n\r\nclass EditActivity extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            activity: {\r\n                type: \"\",\r\n                duration: \"\",\r\n                units: \"Years\"\r\n            },\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        axios.get(`/activities/${this.props.match.params._id}`)\r\n            .then(res => {\r\n                this.setState({activity: res.data.activity});\r\n                // document.getElementById(\"select\").value = this.res.data.activity.units;\r\n            }).catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    changeType = (e) => {\r\n        this.setState({activity: {...this.state.activity, type: e.target.value}});\r\n    }\r\n\r\n    changeDuration = (e) => {\r\n        this.setState({activity: {...this.state.activity, duration: e.target.value}});\r\n    }\r\n\r\n    changeUnits = (e) => {\r\n        this.setState({activity: {...this.state.activity, units: e.target.value}});\r\n    }\r\n\r\n    update = (e) => {\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        axios.put(`/activities/${this.props.match.params._id}`, \r\n        this.state.activity)\r\n            .then(res => {\r\n                if(res.data.errors){\r\n                    this.setState({errors: res.data.errors.errors});\r\n                } else {\r\n                    this.props.history.push('/');\r\n                }\r\n            }).catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    delete = (e) => {\r\n        axios.delete(`/activities/${this.props.match.params._id}`)\r\n            .then(res => {\r\n                this.props.history.push('/');\r\n            }).catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <fieldset>\r\n                <legend>Edit Activity</legend>\r\n                <form onSubmit={this.update}>\r\n                    <p>\r\n                        Type:&nbsp;\r\n                        <input \r\n                            type=\"text\" \r\n                            onChange={this.changeType} \r\n                            value={this.state.activity.type} \r\n                        />\r\n                        {\r\n                            (this.state.errors.type) ? \r\n                            <span className=\"error\">&nbsp;{this.state.errors.type.message}</span> :\r\n                            <span></span>\r\n                        }\r\n                    </p>\r\n                    <p>\r\n                        Duration:&nbsp;\r\n                        <input \r\n                            type=\"number\" \r\n                            onChange={this.changeDuration} \r\n                            value={this.state.activity.duration}\r\n                        />\r\n                        {\r\n                            (this.state.errors.duration) ? \r\n                            <span>&nbsp;{this.state.errors.duration.message}</span> :\r\n                            <span></span>\r\n                        }\r\n                    </p>\r\n                    <p>\r\n                        Units:&nbsp;\r\n                        <select id=\"select\" onChange={this.changeUnits} value={this.state.activity.units}>\r\n                            <option value=\"Years\">Years</option>\r\n                            <option value=\"Months\">Months</option>\r\n                            <option value=\"Days\">Days</option>\r\n                            <option value=\"Hours\">Hours</option>\r\n                            <option value=\"Minutes\">Minutes</option>\r\n                            <option value=\"Seconds\">Seconds</option>\r\n                        </select>\r\n                    </p>\r\n                    <button type=\"submit\">Update Activity</button>\r\n                </form>\r\n                <button onClick={this.delete}>Delete Activity</button>\r\n            </fieldset>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditActivity;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\nclass ReviewActivity extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            activity: {\r\n                type: \"\",\r\n                duration: \"\",\r\n                units: \"Years\",\r\n                reviews: []\r\n            },\r\n            review : {\r\n                name: \"\",\r\n                rating: 3,\r\n                description: \"\"\r\n            },\r\n\r\n            errors: {}\r\n        }\r\n    }\r\n    \r\n    componentDidMount = () => {\r\n        axios.get(`/activities/${this.props.match.params._id}`)\r\n            .then(res => {\r\n                this.setState({activity: res.data.activity});\r\n                // document.getElementById(\"select\").value = this.res.data.activity.units;\r\n            }).catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n    review = (e) => {\r\n        e.preventDefault();\r\n        axios.post(`/activities/${this.props.match.params._id}/review`, this.state.review)\r\n            .then(res => {\r\n                this.componentDidMount();\r\n            }).catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    changeName = (e) => {\r\n        this.setState({review: {...this.state.review, name: e.target.value}});\r\n    }\r\n    changeRating = (e) => {\r\n        this.setState({review: {...this.state.review, rating: e.target.value}});\r\n    }\r\n    changeDescription = (e) => {\r\n        this.setState({review: {...this.state.review, description: e.target.value}});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Activity: {this.state.activity.type} </h3>\r\n                <h4>Duration:  {this.state.activity.duration} {this.state.activity.units}</h4>\r\n                <h4>Review:</h4>\r\n                <hr />\r\n\r\n                {\r\n                    this.state.activity.reviews.map( (review, index) =>\r\n                        <div key={index} >\r\n                            <p>\r\n                                <strong>{review.name} says: </strong> &nbsp;\r\n                                {review.description}\r\n                                \r\n                            </p>\r\n                            <p>{review.rating}</p>\r\n                            <hr />\r\n\r\n                        </div>\r\n                        )\r\n                }\r\n                <fieldset>\r\n                    <legend>Review Activity</legend>\r\n                    <form onSubmit={this.review}>\r\n                        <p>\r\n                            Name:&nbsp;\r\n                            <input type=\"text\" onChange={this.changeName} />\r\n                            {/* {\r\n                                (this.state.errors.type) ? \r\n                                <span className=\"error\">&nbsp;{this.state.errors.type.message}</span> :\r\n                                <span></span> deal with on exam\r\n                            } */}\r\n                        </p>\r\n                        <p>\r\n                            Rating:&nbsp;\r\n                            <input type=\"number\" onChange={this.changeRating} />\r\n                            {/* {\r\n                                (this.state.errors.duration) ? \r\n                                <span>&nbsp;{this.state.errors.duration.message}</span> :\r\n                                <span></span>\r\n                            } */}\r\n                        </p>\r\n                        <p>\r\n                            Description:&nbsp;\r\n                            <input type=\"text\" onChange={this.changeDescription} />\r\n                        </p>\r\n                        <button type=\"submit\">Review Activity</button>\r\n                    </form>\r\n                </fieldset>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReviewActivity","import React, { Component } from 'react';\nimport './App.css';\nimport \"react-router\";\nimport { Link, BrowserRouter, Route } from 'react-router-dom';\nimport DashBoard from './components/DashBoard';\nimport ActivityForm from './components/ActivityForm';\nimport EditActivity from './components/EditActivity';\nimport ReviewActivity from './components/ReviewActivity';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Welcome to Activity Reviews</h1>\n        <BrowserRouter>\n          <ul>\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/activity/new\">New Activity</Link></li>\n          </ul>\n          <Route exact path=\"/\" component={DashBoard} />\n          <Route path=\"/activity/new\" component={ActivityForm} />\n          <Route path=\"/activity/:_id/edit\" component={EditActivity} />\n          <Route path=\"/activity/:_id/review\" component={ReviewActivity} />\n\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}